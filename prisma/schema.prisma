generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id          String      @id @default(cuid())
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  title       String      @db.VarChar(255)
  authorId    String?
  content     String
  homePrice   String
  partnerName String?
  price       String
  published   Boolean     @default(false)
  transport   String
  candidates  Candidate[]
  author      Manager?    @relation(fields: [authorId], references: [id])
  partner     Partner?    @relation(fields: [partnerName], references: [nameCompany])
  location    Location[]  @relation("LocationToPost")
}

model Partner {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  email       String   @unique
  nameCompany String   @unique
  name        String?
  updatedAt   DateTime @updatedAt
  role        Role     @default(USER)
  managerId   String?
  manager     Manager? @relation(fields: [managerId], references: [id])
  posts       Post[]
}

model Manager {
  id         String      @id @default(cuid())
  createdAt  DateTime    @default(now())
  email      String      @unique
  name       String?
  updatedAt  DateTime    @updatedAt
  role       Role        @default(USER)
  candidates Candidate[]
  partners   Partner[]
  posts      Post[]
}

model Other {
  id   String  @id @default(cuid())
  name String?
}

model Document {
  id        String      @id @default(cuid())
  name      String?
  date      String?
  candidate Candidate[]
}

model Profession {
  id        String      @id @default(cuid())
  name      String
  candidate Candidate[]
}

model Location {
  id        String      @id @default(cuid())
  name      String?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @default(now())
  candidate Candidate[]
  posts     Post[]      @relation("LocationToPost")
}

model Candidate {
  id           String     @id @default(cuid())
  name         String
  updatedAt    DateTime   @default(now())
  createdAt    DateTime   @default(now())
  email        String
  locationId   String
  phone        String
  managerId    String
  documentsId  String
  postId       String
  professionId String
  documents    Document   @relation(fields: [documentsId], references: [id])
  location     Location   @relation(fields: [locationId], references: [id])
  manager      Manager    @relation(fields: [managerId], references: [id])
  post         Post       @relation(fields: [postId], references: [id])
  profession   Profession @relation(fields: [professionId], references: [id])
}

enum Role {
  USER
  ADMIN
}
