// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Generate the Prisma Client in JavaScript
generator client {
  provider = "prisma-client-js"
}

// This block of code defines the database connection. The database is a PostgreSQL database. 
// The database connection URL will be read from an environment variable named DATABASE_URL.
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// This block of code defines a Post model
model Post {
  id          String      @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  published   Boolean  @default(false)
  title       String   @db.VarChar(255)
  price String
  homePrice String
  transport String
  location Location[]
  partner     Partner? @relation(fields: [partnerName], references: [nameCompany])
  content     String
  author      Manager? @relation(fields: [authorId], references: [id])
  authorId    String?
  partnerName String?
  candidates Candidate[]
}

model Partner {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  email       String   @unique
  nameCompany String   @unique
  name        String?
  updatedAt   DateTime @updatedAt
  role        Role     @default(USER)
  manager     Manager? @relation(fields: [managerId], references: [id])
  managerId   String?
  posts       Post[]
}

model Manager {
  id        String       @id @default(cuid())
  createdAt DateTime  @default(now())
  email     String    @unique
  name      String?
  posts     Post[]
  updatedAt DateTime  @updatedAt
  role      Role      @default(USER)
  partners  Partner[]
  candidates Candidate[]
}





model Other {
  id   String     @id @default(cuid())
  name String?
}
model Document {
  id   String     @id @default(cuid())
  name String?
  date String?
  candidate Candidate[]
}
model Profession {
  id   String     @id @default(cuid()) 
  name String
  candidate Candidate[]
}
model Location {
  id         String  @id @default(cuid())
  name       String?
  candidate Candidate[]
  posts Post[] 
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Candidate {
  id          String @id @default(cuid())
  name        String
  email String
  phone String
  post Post @relation(fields: [postId],references: [id])
  postId String
  manager Manager @relation(fields: [managerId],references: [id])
  managerId String
  location Location @relation(fields: [locationId], references: [id])
  locationId String   
  profession Profession @relation(fields: [professionId],references: [id])
  professionId String
  documents Document @relation(fields: [documentsId],references: [id])
  documentsId String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
 
}


enum Role {
  USER
  ADMIN
}